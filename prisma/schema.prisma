// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Homes         Home[]
  HomeList      HomeList[]
  SharedList SharedList[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Home {
  id                String    @id @default(uuid())
  link              String    @unique @db.Text
  address           String
  price             String    @default("0")
  attendedShowing   Boolean   @default(false)
  wantsShowing      Boolean   @default(false)
  needsWork         Boolean   @default(false)
  workLevel         WorkLevel @default(None)
  rating            Int       @default(0)
  purchaseCandidate Boolean   @default(false)
  extraInfo         String    @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lists             HomeList? @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId            String?

  @@unique([link, address, userId, listId])
  @@map("homes")
}

model HomeList {
  id          String       @id @default(uuid())
  name        String
  userId      String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  homes       Home[]
  sharedLists SharedList[]

  @@map("home_list")
}

model SharedList {
  id     String @id @default(uuid())
  userId String
  listId String

  list HomeList @relation(fields: [listId], references: [id], onDelete: Cascade)
  user User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shared_list")
}

enum WorkLevel {
  None
  Minor
  Medium
  Major
}
